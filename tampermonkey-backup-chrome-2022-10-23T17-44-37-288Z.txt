{"created_by":"Tampermonkey","version":"1","scripts":[{"name":"Espeon abilities part 1","options":{"check_for_updates":false,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["https://bondageprojects.elementfx.com/*","https://www.bondageprojects.elementfx.com/*","https://bondage-europe.com/*","https://www.bondage-europe.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null}},"storage":{"ts":1666544547239,"data":{}},"enabled":true,"position":1,"uuid":"12a8249d-7cb4-44fb-a071-54a650601ab2","source":""},{"name":"Espeon abilities part 2","options":{"check_for_updates":false,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["https://bondageprojects.elementfx.com/*","https://www.bondageprojects.elementfx.com/*","https://bondage-europe.com/*","https://www.bondage-europe.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null}},"storage":{"ts":1666541663947,"data":{}},"enabled":false,"position":2,"uuid":"de4d9c15-3006-49cb-b7a0-2b2aa82d4117","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBFc3Blb24gYWJpbGl0aWVzIHBhcnQgMgovLyBAbmFtZXNwYWNlICAgIGh0dHA6Ly90YW1wZXJtb25rZXkubmV0LwovLyBAdmVyc2lvbiAgICAgIDEuMTAKLy8gQGF1dGhvciAgICAgICBXaWxsb3cKLy8gQG1hdGNoCQkgaHR0cHM6Ly9ib25kYWdlcHJvamVjdHMuZWxlbWVudGZ4LmNvbS8qCi8vIEBtYXRjaAkJIGh0dHBzOi8vd3d3LmJvbmRhZ2Vwcm9qZWN0cy5lbGVtZW50ZnguY29tLyoKLy8gQG1hdGNoCQkgaHR0cHM6Ly9ib25kYWdlLWV1cm9wZS5jb20vKgovLyBAbWF0Y2gJCSBodHRwczovL3d3dy5ib25kYWdlLWV1cm9wZS5jb20vKgovLyBAZ3JhbnQgICAgICAgIG5vbmUKLy8gPT0vVXNlclNjcmlwdD09CgoKKGZ1bmN0aW9uKCkgewogICAgJ3VzZSBzdHJpY3QnOwoKICAgIC8vY2hhbmdpbmcgdmFyaW91cyBwYXJ0cyBvZiB0aGUgZ2FtZSdzIGNvZGUgYnkgcmVwbGFjaW5nIGVudGlyZSBmdW5jdGlvbnMgd2l0aCBhbHRlcmVkIG9uZXMKICAgIGZ1bmN0aW9uIG1haW4oKSB7CgogICAgICAgIC8qKgogKiBkMjAuanMKICoKICogSmF2YXNjcmlwdCBsaWJyYXJ5IGZvciByb2xsaW5nIGRpY2UuIFN1cHBvcnRzIHN0cmluZ3Mgd3JpdHRlbiBpbiBhIGRpY2Utcm9sbGluZyBzeW50YXgsIGVnLiAiZDIwIiwgIjRkNiIsICIxZDgrMSIuCiAqCiAqIEBhdXRob3IgTWljaGFlbCBFbmdlciA8bWlrZUB0aGVsb25lbHljb2Rlci5jb20+CiAqIEBsaWNlbmNlIE1JVAogKi8KICAgICAgICB2YXIgZDIwID0gewoKICAgICAgICAgICAgLyoqCiAgICAgKiBSb2xsIGEgbnVtYmVyIG9mIGRpY2UgYW5kIHJldHVybiB0aGUgcmVzdWx0LgogICAgICoKICAgICAqIEBwYXJhbSBkaWNlIFR5cGUgb2YgZGljZSB0byByb2xsLCBjYW4gYmUgcmVwcmVzZW50ZWQgaW4gdmFyaW91cyBmb3JtYXRzOgogICAgICogICAgICAgICAgICAgICAtIGEgbnVtYmVyICg2LCAxMiwgNDIpCiAgICAgKiAgICAgICAgICAgICAgIC0gZGljZSBzeW50YXggKGQyMCwgNGQ2LCAyZDgrMikKICAgICAqIEBwYXJhbSB2ZXJib3NlIFdoZXRoZXIgb3Igbm90IGFsbCBkaWNlIHJvbGxzIHNob3VsZCBiZSByZXR1cm5lZCBhcyBhbiBhcnJheQogICAgICogQHJldHVybiBOdW1iZXJ8QXJyYXkKICAgICAqLwogICAgICAgICAgICByb2xsOiBmdW5jdGlvbihkaWNlLCB2ZXJib3NlKSB7CiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gZDIwLnZlcmJvc2VSb2xsKGRpY2UpLAogICAgICAgICAgICAgICAgICAgIG51bSA9IDA7CgogICAgICAgICAgICAgICAgaWYodmVyYm9zZSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgaW4gcmVzdWx0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG51bSArPSByZXN1bHRbaV07CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAoKICAgICAgICAgICAgLyoqCiAgICAgKiBSb2xsIGEgbnVtYmVyIG9mIGRpY2UgYW5kIHJldHVybiB0aGUgcmVzdWx0IGFzIGFuIGFycmF5LgogICAgICoKICAgICAqIEBwYXJhbSBkaWNlIFR5cGUgb2YgZGljZSB0byByb2xsLCBjYW4gYmUgcmVwcmVzZW50ZWQgaW4gdmFyaW91cyBmb3JtYXRzOgogICAgICogICAgICAgICAgICAgICAtIGEgbnVtYmVyICg2LCAxMiwgNDIpCiAgICAgKiAgICAgICAgICAgICAgIC0gZGljZSBzeW50YXggKGQyMCwgNGQ2LCAyZDgrMikKICAgICAqIEByZXR1cm4gQXJyYXkKICAgICAqLwogICAgICAgICAgICB2ZXJib3NlUm9sbDogZnVuY3Rpb24oZGljZSkgewogICAgICAgICAgICAgICAgdmFyIGFtb3VudCA9IDEsCiAgICAgICAgICAgICAgICAgICAgbW9kID0gMCwKICAgICAgICAgICAgICAgICAgICByZXN1bHRzID0gW10sCiAgICAgICAgICAgICAgICAgICAgbWF0Y2gsCiAgICAgICAgICAgICAgICAgICAgbnVtLAogICAgICAgICAgICAgICAgICAgIG1vZGlmaWVyczsKCiAgICAgICAgICAgICAgICBpZiAoIWRpY2UpIHsKICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01pc3NpbmcgZGljZSBwYXJhbWV0ZXIuJyk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkaWNlID09ICdzdHJpbmcnKSB7CiAgICAgICAgICAgICAgICAgICAgbWF0Y2ggPSBkaWNlLm1hdGNoKC9eXHMqKFxkKyk/XHMqZFxzKihcZCspXHMqKC4qPylccyokLyk7CiAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaFsxXSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYW1vdW50ID0gcGFyc2VJbnQobWF0Y2hbMV0pOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaFsyXSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGljZSA9IHBhcnNlSW50KG1hdGNoWzJdKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2hbM10pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGlmaWVycyA9IG1hdGNoWzNdLm1hdGNoKC8oWystXVxzKlxkKykvZyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1vZGlmaWVycy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZCArPSBwYXJzZUludChtb2RpZmllcnNbaV0ucmVwbGFjZSgvXHMvZywgJycpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlSW50KGRpY2UpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoaXNOYU4oZGljZSkpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gW107CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhbW91bnQ7IGkrKykgewogICAgICAgICAgICAgICAgICAgIC8qIFdlIGRvbnQgd2FudCB0byBydWluIHZlcmJvc2UsIHNvIHdlIGRvbnQgc2tpcCB0aGUgZm9yIGxvb3AgKi8KICAgICAgICAgICAgICAgICAgICBpZihkaWNlICE9PSAwKXsKICAgICAgICAgICAgICAgICAgICAgICAgbnVtID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogZGljZSArIDEpOwogICAgICAgICAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgICAgICAgICBudW0gPSAwOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2gobnVtKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXN1bHRzID0gcmVzdWx0cy5zb3J0KGZ1bmN0aW9uKGEsIGIpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gYSAtIGI7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIGlmIChtb2QgIT0gMCkgewogICAgICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaChtb2QpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHRzOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgICAgd2luZG93LmQyMCA9IGQyMDsKICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzICE9ICd1bmRlZmluZWQnKSB7CiAgICAgICAgICAgIGZvciAodmFyIGsgaW4gZDIwKSB7CiAgICAgICAgICAgICAgICBleHBvcnRzW2tdID0gZDIwW2tdOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIC8vIGVuZCBvZiB0aGUgYm9ycm93ZWQgZGljZSBsaWJyYXJ5CgogICAgICAgIENoYXRyb29tRG5ERGljZSA9IGZ1bmN0aW9uKG1zZyl7CiAgICAgICAgICAgIHJlc3VsdCA9IGQyMC5yb2xsKG1zZykKCiAgICAgICAgICAgIG1zZyA9IFBsYXllci5OYW1lICsgJyByb2xscyAnKyBtc2cgKycuIFRoZSByZXN1bHQgaXM6ICcrIHJlc3VsdCArICcuJwogICAgICAgICAgICBTZXJ2ZXJTZW5kKCJDaGF0Um9vbUNoYXQiLAogICAgICAgICAgICAgICAgICAgICAgIHsgQ29udGVudDogIkJlZXAiLCBUeXBlOiAiQWN0aW9uIiwgRGljdGlvbmFyeTogW3sgVGFnOiAiQmVlcCIsIFRleHQ6ICJtc2ciIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBUYWc6ICJtc2ciLCBUZXh0OiBtc2cgfV0sIFRhcmdldDogdGFyZ2V0IH0pOwogICAgICAgIH0KCgogICAgICAgIFVzZVBhc3N3b3JkTG9jayA9IGZ1bmN0aW9uKGNoYXIsdGFyZ2V0LGxvY2tlcixwYXNzd29yZCxoaW50KXsKICAgICAgICAgICAgSW52ZW50b3J5TG9jayhjaGFyLCB0YXJnZXQsICJQYXNzd29yZFBhZGxvY2siLGxvY2tlcikKICAgICAgICAgICAgSW52ZW50b3J5R2V0KGNoYXIsIHRhcmdldCkuUHJvcGVydHkuUGFzc3dvcmQgPSBwYXNzd29yZAogICAgICAgICAgICBJbnZlbnRvcnlHZXQoY2hhciwgdGFyZ2V0KS5Qcm9wZXJ0eS5IaW50ID0gaGludAogICAgICAgICAgICBJbnZlbnRvcnlHZXQoY2hhciwgdGFyZ2V0KS5Qcm9wZXJ0eS5Mb2NrU2V0ID0gdHJ1ZQogICAgICAgfQoKCiAgICAgICAgQ2hhdFJvb21BY3Rpb25NZXNzYWdlID0gZnVuY3Rpb24obXNnLCB0YXJnZXQgPSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgLy8gY29tbWFuZHMgZGVmaW5lZCBoZXJlIGFyZSB1c2VkIHdpdGggL2RvIC9jb21tYW5kIFthcmdzXQogICAgICAgICAgICAvLyBleGFtcGxlIC9kbyAvYmluZCAxCiAgICAgICAgICAgIC8vIGJpbmRzIHRoZSBmaXJzdCBwbGF5ZXIgaW4gdGhlIHJvb20KICAgICAgICAgICAgaWYobXNnLmluZGV4T2YoJy9jaGFybScpID09IDApewogICAgICAgICAgICAgICAgLy90YXJnZXR0aW5nIGRvIG5vdCBjaGFuZ2UKICAgICAgICAgICAgICAgIHZhciB3aG8gPSBwYXJzZUludChtc2cuc3Vic3RyaW5nKG1zZy5pbmRleE9mKCIgIikpKQogICAgICAgICAgICAgICAgdmFyIGNoYXIgPSBDaGF0Um9vbUNoYXJhY3Rlclt3aG8tMV0KCiAgICAgICAgICAgICAgICBDaGF0Um9vbUNoYXJhY3RlclVwZGF0ZShjaGFyKTsKICAgICAgICAgICAgICAgIC8vdGhlIGN1c3RvbSBtZXNzYWdlIHRvIHNlbmQKICAgICAgICAgICAgICAgbXNnID0gUGxheWVyLk5hbWUgKyAnIHVzZXMgY2hhcm0gb24gJysgY2hhci5OYW1lKyAnIG1ha2luZyBoZXJzZWxmIGFwcGVhcmUgbW9yZSBhZG9yYWJsZSB0byB0aGVtJwogICAgICAgICAgICB9IGVsc2UgaWYobXNnLmluZGV4T2YoJy9kYXplJyk9PTApewogICAgICAgICAgICAgICAgdmFyIHdobyA9IHBhcnNlSW50KG1zZy5zdWJzdHJpbmcobXNnLmluZGV4T2YoIiAiKSkpCiAgICAgICAgICAgICAgICB2YXIgY2hhciA9IENoYXRSb29tQ2hhcmFjdGVyW3doby0xXQoKICAgICAgICAgICAgICAgIENoYXRSb29tQ2hhcmFjdGVyVXBkYXRlKGNoYXIpOwogICAgICAgICAgICAgICAgbXNnID0gUGxheWVyLk5hbWUgKyAnIHVzZXMgZGF6ZSBvbiAnKyBjaGFyLk5hbWUrICcgbWFraW5nIHRoaW0gZmVlbCBzbGVlcHknCgogICAgICAgICAgICB9IGVsc2UgaWYobXNnLmluZGV4T2YoJy9yZXN0Jyk9PTApewogICAgICAgICAgICAgICAgdmFyIHdobyA9IHBhcnNlSW50KG1zZy5zdWJzdHJpbmcobXNnLmluZGV4T2YoIiAiKSkpCiAgICAgICAgICAgICAgICB2YXIgY2hhciA9IENoYXRSb29tQ2hhcmFjdGVyW3doby0xXQoKICAgICAgICAgICAgICAgIENoYXRSb29tQ2hhcmFjdGVyVXBkYXRlKGNoYXIpOwogICAgICAgICAgICAgICAgbXNnID0gUGxheWVyLk5hbWUgKyAnIHVzZXMgcmVzdCBvbiAnKyBjaGFyLk5hbWUrICcgcHV0dGluZyB0aGVtIHRvIHNsZWVwJwoKCiAgICAgICAgICAgIH0gZWxzZSBpZihtc2cuaW5kZXhPZignL3NsZWVwJyk9PTApewogICAgICAgICAgICAgICAgLy8gZG9lc24ndCBzZWVtIHRvIHdvcmsgcmlnaHQuIG5lZWQgdGVzdGluZwogICAgICAgICAgICAgICAgdmFyIHdobyA9IHBhcnNlSW50KG1zZy5zdWJzdHJpbmcobXNnLmluZGV4T2YoIiAiKSkpCiAgICAgICAgICAgICAgICB2YXIgY2hhciA9IENoYXRSb29tQ2hhcmFjdGVyW3doby0xXQogICAgICAgICAgICAgICAgSW52ZW50b3J5V2VhcihjaGFyLCJSZWd1bGFyU2xlZXBpbmdQaWxsIiwnSXRlbU1vdXRoJykKICAgICAgICAgICAgICAgIENoYXRSb29tQ2hhcmFjdGVyVXBkYXRlKGNoYXIpCiAgICAgICAgICAgICAgICBtc2cgPSAgUGxheWVyLk5hbWUgKyAnIGZlZWRzICcrIGNoYXIuTmFtZSsgJyBhIHNsZWVwaW5nIHBpbGwnCiAgICAgICAgICAgIH0gZWxzZSBpZihtc2cuaW5kZXhPZignZ2Fnb2ZmJyk9PTApewogICAgICAgICAgICAgICAgLy8gaWYgdXNlZCB0b2dldGhlciB3aXRoIGdhZ3NwZWFrIGNvZGUsIHRoZXNlIHdvcmsgYXMgYSB0b2dnbGUKICAgICAgICAgICAgICAgIHdpbmRvdy5TcGVlY2hHYXJibGUgPSBPbGRTcGVlY2hHYXJibGUKICAgICAgICAgICAgICAgIG1zZyA9ICcnCiAgICAgICAgICAgIH0gZWxzZSBpZihtc2cuaW5kZXhPZignZ2Fnb24nKT09MCl7CiAgICAgICAgICAgICAgICB3aW5kb3cuU3BlZWNoR2FyYmxlID0gTmV3U3BlZWNoR2FyYmxlCiAgICAgICAgICAgICAgICBtc2cgPSAnJwogICAgICAgICAgICB9IGVsc2UgaWYobXNnLmluZGV4T2YoJy9pbnZpc2libGUnKSA9PSAwKXsKICAgICAgICAgICAgICAgIHZhciB3aG8gPSBwYXJzZUludChtc2cuc3Vic3RyaW5nKG1zZy5pbmRleE9mKCIgIikpKQogICAgICAgICAgICAgICAgdmFyIGNoYXIgPSBDaGF0Um9vbUNoYXJhY3Rlclt3aG8tMV0KCiAgICAgICAgICAgICAgICBJbnZlbnRvcnlXZWFyKGNoYXIsICJGdXR1cmlzdGljSGVlbHMiLCAiSXRlbUJvb3RzIik7CiAgICAgICAgICAgICAgICBpdGVtID0gSW52ZW50b3J5R2V0KGNoYXIsICJJdGVtQm9vdHMiKTsKICAgICAgICAgICAgICAgIGl0ZW0uUHJvcGVydHkgPSB7CiAgICAgICAgICAgICAgICAgICAgVHlwZTogIkhlZWwiLAogICAgICAgICAgICAgICAgICAgIEhpZGU6IFsiQWN0aXZpdHkiLCAiQ29yc2V0IiwgIkJsdXNoIiwgIkJvZHlMb3dlciIsICJCb2R5VXBwZXIiLCAiQnJhIiwgIkNsb3RoIiwgIkNsb3RoTG93ZXIiLCAiQ2xvdGhBY2Nlc3NvcnkiLCAiRW1vdGljb24iLCAiRXllYnJvd3MiLCAiRXllcyIsICJFeWVzMiIsICJGbHVpZHMiLCAiR2xhc3NlcyIsICJHbG92ZXMiLCAiSGFpckFjY2Vzc29yeTEiLCAiSGFpckFjY2Vzc29yeTIiLCAiSGFpckFjY2Vzc29yeTMiLCAiSGFpckJhY2siLCAiSGFpckZyb250IiwgIkhhaXJCYWNrIiwgIkhhbmRzIiwgIkhhdCIsICJIZWFkIiwgIkl0ZW1BZGRvbiIsICJJdGVtQnJlYXN0IiwgIkl0ZW1CdXR0IiwgIkl0ZW1EZXZpY2VzIiwgIkl0ZW1FYXJzIiwgIkl0ZW1Bcm1zIiwgIkl0ZW1GZWV0IiwgIkl0ZW1IYW5kcyIsICJJdGVtSGVhZCIsICJJdGVtSG9vZCIsICJJdGVtSG9vZEFkZG9uIiwgIkl0ZW1MZWdzIiwgIkl0ZW1NaXNjIiwgIkl0ZW1Nb3V0aCIsICJJdGVtTW91dGgyIiwgIkl0ZW1Nb3V0aDMiLCAiSXRlbU5lY2siLCAiSXRlbU5lY2tBY2Nlc3NvcmllcyIsICJJdGVtTmVja1Jlc3RyYWludHMiLCAiSXRlbU5pcHBsZXMiLCAiSXRlbU5pcHBsZXNQaWVyY2luZ3MiLCAiSXRlbU5vc2UiLCAiSXRlbVBlbHZpcyIsICJJdGVtVG9yc28iLCAiSXRlbVZ1bHZhIiwgIkl0ZW1WdWx2YVBpZXJjaW5ncyIsICJNYXNrIiwgIk1vdXRoIiwgIk5lY2tsYWNlIiwgIk5pcHBsZXMiLCAiUGFudGllcyIsICJQdXNzeSIsICJTaG9lcyIsICJTb2NrcyIsICJTdWl0IiwgIlN1aXRMb3dlciIsICJUYWlsU3RyYXBzIiwgIldpbmdzIl0KICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBpdGVtLkNvbG9yID0gWycjMDAwJywnIzAwMCcsJyMwMDAnXQogICAgICAgICAgICAgICAgQ2hhdFJvb21DaGFyYWN0ZXJVcGRhdGUoY2hhcik7CiAgICAgICAgICAgICAgICBtc2cgPSAnJwogICAgICAgICAgICB9IGVsc2UgaWYobXNnLmluZGV4T2YoJy9zaXN0ZXInKT09MCl7CiAgICAgICAgICAgICAgICB2YXIgd2hvID0gcGFyc2VJbnQobXNnLnN1YnN0cmluZyhtc2cuaW5kZXhPZigiICIpKSkKICAgICAgICAgICAgICAgIHZhciBjaGFyID0gQ2hhdFJvb21DaGFyYWN0ZXJbd2hvLTFdCgogICAgICAgICAgICAgICAgSW52ZW50b3J5V2VhcihjaGFyLCdDdXN0b21Db2xsYXJUYWcnLCdJdGVtTmVja0FjY2Vzc29yaWVzJykKICAgICAgICAgICAgICAgIGl0ZW0gPSBJbnZlbnRvcnlHZXQoY2hhciwgIkl0ZW1OZWNrQWNjZXNzb3JpZXMiKTsKICAgICAgICAgICAgICAgIGl0ZW0uQ29sb3IgPSBbJyM1MTUxNTEnLCcjRkZGRkZGJ10KICAgICAgICAgICAgICAgIGl0ZW0uUHJvcGVydHkgPSB7VGV4dDonU0lMRU5DRSd9CiAgICAgICAgICAgICAgICBJbnZlbnRvcnlMb2NrKGNoYXIsICJJdGVtTmVja0FjY2Vzc29yaWVzIiwgIlBhc3N3b3JkUGFkbG9jayIsMzU3NTgpCiAgICAgICAgICAgICAgICBVc2VQYXNzd29yZExvY2soY2hhciwnSXRlbU5lY2tBY2Nlc3NvcmllcycsMzU3NTgsJ1NISEhISEhIJywnVm93IG9mIFNpbGVuY2UnKQoKICAgICAgICAgICAgICAgIEludmVudG9yeVdlYXIoY2hhciwiQ2xvdGhTdHVmZmluZyIsJ0l0ZW1Nb3V0aCcpCiAgICAgICAgICAgICAgICBpdGVtID0gSW52ZW50b3J5R2V0KGNoYXIsICJJdGVtTW91dGgiKQogICAgICAgICAgICAgICAgaXRlbS5Db2xvciA9IFsiI0ZGRkZGRiJdCgogICAgICAgICAgICAgICAgSW52ZW50b3J5V2VhcihjaGFyLCJDbG90aEdhZyIsJ0l0ZW1Nb3V0aDInKQogICAgICAgICAgICAgICAgaXRlbSA9IEludmVudG9yeUdldChjaGFyLCAiSXRlbU1vdXRoMiIpCiAgICAgICAgICAgICAgICBpdGVtLkNvbG9yID0gIiNCMEIwQjAiCiAgICAgICAgICAgICAgICBpdGVtLlByb3BlcnR5ID0gewogICAgICAgICAgICAgICAgICAgIFR5cGU6ICJPVE0iLAogICAgICAgICAgICAgICAgICAgIEVmZmVjdDogWyJHYWdFYXN5Il0KICAgICAgICAgICAgICAgIH0KCgogICAgICAgICAgICAgICAgSW52ZW50b3J5V2VhcihjaGFyLCdNdXp6bGVHYWcnLCdJdGVtTW91dGgzJykKICAgICAgICAgICAgICAgIGl0ZW0gPSBJbnZlbnRvcnlHZXQoY2hhciwgIkl0ZW1Nb3V0aDMiKQogICAgICAgICAgICAgICAgaXRlbS5Db2xvciA9IFsiIzFBMUExQSIsICIjMUExQTFBIl0KICAgICAgICAgICAgICAgIEludmVudG9yeUxvY2soY2hhciwgIkl0ZW1Nb3V0aDMiLCAiUGFzc3dvcmRQYWRsb2NrIiwzNTc1OCkKICAgICAgICAgICAgICAgIFVzZVBhc3N3b3JkTG9jayhjaGFyLCdJdGVtTW91dGgzJywzNTc1OCwnU0hISEhISEgnLCdWb3cgb2YgU2lsZW5jZScpCiAgICAgICAgICAgICAgICBDaGF0Um9vbUNoYXJhY3RlclVwZGF0ZShjaGFyKTsKICAgICAgICAgICAgICAgIG1zZyA9IFBsYXllci5OYW1lKycgYWRvcm5zIHRoZSBnYWdzIG9mIHRoZSBzaXN0ZXJob29kJwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAobXNnICE9ICIiKQogICAgICAgICAgICAgICAgU2VydmVyU2VuZCgiQ2hhdFJvb21DaGF0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBDb250ZW50OiAiQmVlcCIsIFR5cGU6ICJBY3Rpb24iLCBEaWN0aW9uYXJ5OiBbeyBUYWc6ICJCZWVwIiwgVGV4dDogIm1zZyIgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBUYWc6ICJtc2ciLCBUZXh0OiBtc2cgfV0sIFRhcmdldDogdGFyZ2V0IH0pOwogICAgICAgIH0KCgogICAgICAgIENoYXRSb29tRmFjZUNoYW5nZSA9IGZ1bmN0aW9uKG1zZyl7CiAgICAgICAgICAgIGlmKG1zZy5pbmRleE9mKCdzbWlsZScpPT0wKXsKICAgICAgICAgICAgICAgIC8vIGZhY2lhbCBleHByZXNzaW9uCiAgICAgICAgICAgICAgICBJbnZlbnRvcnlSZW1vdmUoUGxheWVyLCAiQmx1c2giKQogICAgICAgICAgICAgICAgSW52ZW50b3J5UmVtb3ZlKFBsYXllciwgIkZsdWlkcyIpCiAgICAgICAgICAgICAgICBDaGFyYWN0ZXJTZXRGYWNpYWxFeHByZXNzaW9uKFBsYXllciwgIk1vdXRoIiwgIlNtaXJrIikKICAgICAgICAgICAgICAgIENoYXJhY3RlclNldEZhY2lhbEV4cHJlc3Npb24oUGxheWVyLCAiRXllcyIsIG51bGwpCiAgICAgICAgICAgICAgICBDaGFyYWN0ZXJTZXRGYWNpYWxFeHByZXNzaW9uKFBsYXllciwgIkV5ZWJyb3dzIiwgIkxvd2VyZWQiKQogICAgICAgICAgICAgICAgQ2hhcmFjdGVyUmVmcmVzaChQbGF5ZXIpCiAgICAgICAgICAgICAgICBDaGF0Um9vbUNoYXJhY3RlclVwZGF0ZShQbGF5ZXIpCiAgICAgICAgICAgIH0gZWxzZSBpZihtc2cuaW5kZXhPZignZXZpbCcpPT0wKXsKICAgICAgICAgICAgICAgIEludmVudG9yeVJlbW92ZShQbGF5ZXIsICJCbHVzaCIpCiAgICAgICAgICAgICAgICBJbnZlbnRvcnlSZW1vdmUoUGxheWVyLCAiRmx1aWRzIikKICAgICAgICAgICAgICAgIENoYXJhY3RlclNldEZhY2lhbEV4cHJlc3Npb24oUGxheWVyLCAiTW91dGgiLCAiU21pcmsiKQogICAgICAgICAgICAgICAgQ2hhcmFjdGVyU2V0RmFjaWFsRXhwcmVzc2lvbihQbGF5ZXIsICJFeWVzIiwgbnVsbCkKICAgICAgICAgICAgICAgIENoYXJhY3RlclNldEZhY2lhbEV4cHJlc3Npb24oUGxheWVyLCAiRXllYnJvd3MiLCAiQW5ncnkiKQogICAgICAgICAgICAgICAgQ2hhcmFjdGVyUmVmcmVzaChQbGF5ZXIpCiAgICAgICAgICAgICAgICBDaGF0Um9vbUNoYXJhY3RlclVwZGF0ZShQbGF5ZXIpCiAgICAgICAgICAgIH0gZWxzZSBpZihtc2cuaW5kZXhPZignc2NhcmVkJyk9PTApewogICAgICAgICAgICAgICAgSW52ZW50b3J5UmVtb3ZlKFBsYXllciwgIkJsdXNoIikKICAgICAgICAgICAgICAgIEludmVudG9yeVJlbW92ZShQbGF5ZXIsICJGbHVpZHMiKQogICAgICAgICAgICAgICAgQ2hhcmFjdGVyU2V0RmFjaWFsRXhwcmVzc2lvbihQbGF5ZXIsICJNb3V0aCIsIG51bGwpCiAgICAgICAgICAgICAgICBDaGFyYWN0ZXJTZXRGYWNpYWxFeHByZXNzaW9uKFBsYXllciwgIkV5ZXMiLCAnU2NhcmVkJykKICAgICAgICAgICAgICAgIENoYXJhY3RlclNldEZhY2lhbEV4cHJlc3Npb24oUGxheWVyLCAiRXllYnJvd3MiLCAiU29mdCIpCiAgICAgICAgICAgICAgICBDaGFyYWN0ZXJSZWZyZXNoKFBsYXllcikKICAgICAgICAgICAgICAgIENoYXRSb29tQ2hhcmFjdGVyVXBkYXRlKFBsYXllcikKICAgICAgICAgICAgfSBlbHNlIGlmKG1zZy5pbmRleE9mKCdibHVzaCcpPT0wKXsKICAgICAgICAgICAgICAgIHZhciBibHVzaCA9IHBhcnNlSW50KG1zZy5zdWJzdHJpbmcobXNnLmluZGV4T2YoIiAiKSkpCiAgICAgICAgICAgICAgICBpZigoYmx1c2ggIT0gIiIpKXsKICAgICAgICAgICAgICAgICAgICBpZihibHVzaCA+IDApewogICAgICAgICAgICAgICAgICAgICAgICBpZihibHVzaCA9PSAxKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEludmVudG9yeVJlbW92ZShQbGF5ZXIsICJCbHVzaCIpCiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZihibHVzaCA9PSAyKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIENoYXJhY3RlclNldEZhY2lhbEV4cHJlc3Npb24oUGxheWVyLCAiQmx1c2giLCAiTG93IikKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmKGJsdXNoID09IDMpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2hhcmFjdGVyU2V0RmFjaWFsRXhwcmVzc2lvbihQbGF5ZXIsICJCbHVzaCIsICJNZWRpdW0iKQogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYoYmx1c2ggPT0gNCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDaGFyYWN0ZXJTZXRGYWNpYWxFeHByZXNzaW9uKFBsYXllciwgIkJsdXNoIiwgIkhpZ2giKQogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYoYmx1c2ggPT0gNSl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDaGFyYWN0ZXJTZXRGYWNpYWxFeHByZXNzaW9uKFBsYXllciwgIkJsdXNoIiwgIlZlcnlIaWdoIikKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmKGJsdXNoID09IDYpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2hhcmFjdGVyU2V0RmFjaWFsRXhwcmVzc2lvbihQbGF5ZXIsICJCbHVzaCIsICJFeHRyZW1lIikKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmKGJsdXNoID09IDcpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2hhcmFjdGVyU2V0RmFjaWFsRXhwcmVzc2lvbihQbGF5ZXIsICJCbHVzaCIsICJTaG9ydEJyZWF0aCIpCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBDaGFyYWN0ZXJSZWZyZXNoKFBsYXllcikKICAgICAgICAgICAgICAgIENoYXRSb29tQ2hhcmFjdGVyVXBkYXRlKFBsYXllcikKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgQ2hhdFJvb21XYXJkcm9iZUNoYW5nZSA9IGZ1bmN0aW9uKG1zZykgewogICAgICAgICAgICBtYXRjaCA9IC0xCiAgICAgICAgICAgIGlmKG1zZy5pbmRleE9mKCdnbGFzc3VwJyk9PTB8fCBtc2cuaW5kZXhPZignZ3VwJyk9PTApewogICAgICAgICAgICAgICAgSW52ZW50b3J5V2VhcihQbGF5ZXIsIkdsYXNzZXMxIiwiR2xhc3NlcyIpCiAgICAgICAgICAgICAgICBpdGVtID0gSW52ZW50b3J5R2V0KFBsYXllciwgIkdsYXNzZXMiKQogICAgICAgICAgICAgICAgaXRlbS5Db2xvciA9IFsiI0MwOTY3MCJdCiAgICAgICAgICAgICAgICBDaGF0Um9vbUNoYXJhY3RlclVwZGF0ZShQbGF5ZXIpCiAgICAgICAgICAgIH0gZWxzZSBpZihtc2cuaW5kZXhPZignZ2xhc3Nkb3duJyk9PTAgfHwgbXNnLmluZGV4T2YoJ2dkb3duJyk9PTApewogICAgICAgICAgICAgICAgSW52ZW50b3J5V2VhcihQbGF5ZXIsIkdsYXNzZXMyIiwiR2xhc3NlcyIpCiAgICAgICAgICAgICAgICBpdGVtID0gSW52ZW50b3J5R2V0KFBsYXllciwgIkdsYXNzZXMiKQogICAgICAgICAgICAgICAgaXRlbS5Db2xvciA9IFsiI0MwOTY3MCJdCiAgICAgICAgICAgICAgICBDaGF0Um9vbUNoYXJhY3RlclVwZGF0ZShQbGF5ZXIpCiAgICAgICAgICAgIH0gIGVsc2UgaWYobXNnLmluZGV4T2YoJ2dsYXNzb2ZmJyk9PTB8fCBtc2cuaW5kZXhPZignZ29mZicpPT0wKXsKICAgICAgICAgICAgICAgIEludmVudG9yeVJlbW92ZShQbGF5ZXIsJ0dsYXNzZXMnKQogICAgICAgICAgICAgICAgQ2hhdFJvb21DaGFyYWN0ZXJVcGRhdGUoUGxheWVyKQogICAgICAgICAgICB9CiAgICAgICAgICAgIFBsYXllci5XYXJkcm9iZUNoYXJhY3Rlck5hbWVzLmZvckVhY2goZnVuY3Rpb24obmFtZSxpbmRleCl7CiAgICAgICAgICAgICAgICBpZihuYW1lLmluZGV4T2YobXNnKSA9PSAwKXsKICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhpbmRleCkKICAgICAgICAgICAgICAgICAgICBtYXRjaCA9IGluZGV4CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pCiAgICAgICAgICAgIGlmKG1hdGNoICE9IC0xKXsKICAgICAgICAgICAgICAgIFdhcmRyb2JlRmFzdExvYWQoUGxheWVyLG1hdGNoKQogICAgICAgICAgICAgICAgQ2hhdFJvb21DaGFyYWN0ZXJVcGRhdGUoUGxheWVyKQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBDaGF0Um9vbUVuZXJneURyaW5rID0gZnVuY3Rpb24oKXsKICAgICAgICAgICAgTG9nQWRkKCJNb2RpZmllckR1cmF0aW9uIiwgIlNraWxsTW9kaWZpZXIiLCBDdXJyZW50VGltZSArIDM2MDAwMDApOyAvLyBhZmZlY3RzIGxhc3RzIDEgaG91cgogICAgICAgICAgICBMb2dBZGQoIk1vZGlmaWVyTGV2ZWwiLCAiU2tpbGxNb2RpZmllciIsIDUpCiAgICAgICAgfQoKICAgICAgICBDaGF0Um9vbVBvb2YgPSBmdW5jdGlvbihtc2cpewogICAgICAgICAgICBpZihtc2cgPT0gJy9wb29mJyl7CiAgICAgICAgICAgICAgICBTZXJ2ZXJTZW5kKCJDaGF0Um9vbUNoYXQiLAogICAgICAgICAgICAgICAgICAgICAgIHsgQ29udGVudDogIkJlZXAiLCBUeXBlOiAiQWN0aW9uIiwgRGljdGlvbmFyeTogW3sgVGFnOiAiQmVlcCIsIFRleHQ6ICJtc2ciIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBUYWc6ICJtc2ciLCBUZXh0OiBQbGF5ZXIuTmFtZSArICcgcG9vZnMgYXdheScgfV0sIFRhcmdldDogbnVsbCB9KTsKICAgICAgICAgICAgfSBlbHNlewogICAgICAgICAgICAgICAgU2VydmVyU2VuZCgiQ2hhdFJvb21DaGF0IiwKICAgICAgICAgICAgICAgICAgICAgICB7IENvbnRlbnQ6ICJCZWVwIiwgVHlwZTogIkFjdGlvbiIsIERpY3Rpb25hcnk6IFt7IFRhZzogIkJlZXAiLCBUZXh0OiAibXNnIiB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgVGFnOiAibXNnIiwgVGV4dDogbXNnIH1dLCBUYXJnZXQ6IG51bGwgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgUmVsb2dFeGl0KCkKICAgICAgICB9CgogICAgICAgIE9yaWdpbmFsQ2hhdHJvb21TZW5kQ2hhdCA9IENoYXRSb29tU2VuZENoYXQKICAgICAgICBDaGF0Um9vbVNlbmRDaGF0ID0gZnVuY3Rpb24oKXsKICAgICAgICAgICAgdmFyIG1zZyA9IEVsZW1lbnRWYWx1ZSgiSW5wdXRDaGF0IikudHJpbSgpCiAgICAgICAgICAgIHZhciBtID0gbXNnLnRvTG93ZXJDYXNlKCkudHJpbSgpOwogICAgICAgICAgICBzZW50VG9PcmlnaW5hbCA9IGZhbHNlCgogICAgICAgICAgICBpZiAobS5pbmRleE9mKCIvZG8gIikgPT0gMCkge0NoYXRSb29tQWN0aW9uTWVzc2FnZShtc2cuc3Vic3RyaW5nKG1zZy5pbmRleE9mKCIgIikpLnRyaW0oKSk7Y29uc29sZS5sb2coJ2FjdGlvbiBhdHRlbXB0Jyl9CiAgICAgICAgICAgIGVsc2UgaWYgKG0uaW5kZXhPZigiL2ZhY2UgIikgPT0gMCkge0NoYXRSb29tRmFjZUNoYW5nZShtc2cuc3Vic3RyaW5nKG1zZy5pbmRleE9mKCIgIikpLnRyaW0oKSk7Y29uc29sZS5sb2coJ2V4cHJlc3Npb24gY2hhbmdlJyl9CiAgICAgICAgICAgIGVsc2UgaWYgKG0uaW5kZXhPZigiL2YgIikgPT0gMCkge0NoYXRSb29tRmFjZUNoYW5nZShtc2cuc3Vic3RyaW5nKG1zZy5pbmRleE9mKCIgIikpLnRyaW0oKSk7Y29uc29sZS5sb2coJ2V4cHJlc3Npb24gY2hhbmdlJyl9CiAgICAgICAgICAgIGVsc2UgaWYgKG0uaW5kZXhPZigiL2Nsb3RoZXMgIikgPT0gMCkge0NoYXRSb29tV2FyZHJvYmVDaGFuZ2UobXNnLnN1YnN0cmluZyhtc2cuaW5kZXhPZigiICIpKS50cmltKCkpO2NvbnNvbGUubG9nKCdjbG90aCBjaGFuZ2UnKX0KICAgICAgICAgICAgZWxzZSBpZiAobS5pbmRleE9mKCIvYyAiKSA9PSAwKSB7Q2hhdFJvb21XYXJkcm9iZUNoYW5nZShtc2cuc3Vic3RyaW5nKG1zZy5pbmRleE9mKCIgIikpLnRyaW0oKSk7Y29uc29sZS5sb2coJ2Nsb3RoIGNoYW5nZScpfQogICAgICAgICAgICBlbHNlIGlmIChtLmluZGV4T2YoIi9zYXZlICIpID09IDApIHtzYXZlQ2xvdGhlcyhtc2cuc3Vic3RyaW5nKG1zZy5pbmRleE9mKCIgIikpLnRyaW0oKSk7Y29uc29sZS5sb2coJ2xvY2FsIHNhdmUnKX0KICAgICAgICAgICAgZWxzZSBpZiAobS5pbmRleE9mKCIvbG9hZCAiKSA9PSAwKSB7bG9hZENsb3RoZXMobXNnLnN1YnN0cmluZyhtc2cuaW5kZXhPZigiICIpKS50cmltKCkpO2NvbnNvbGUubG9nKCdsb2NhbCBsb2FkJyl9CiAgICAgICAgICAgIGVsc2UgaWYgKG0uaW5kZXhPZigiL2xpc3QiKSA9PSAwKSB7bGlzdENsb3RoZXMoKTtjb25zb2xlLmxvZygnbGlzdCBjbG90aGVzJyl9CiAgICAgICAgICAgIGVsc2UgaWYgKG0uaW5kZXhPZigiL2RlbGV0ZSAiKSA9PSAwKSB7ZGVsZXRlQ2xvdGhlcyhtc2cuc3Vic3RyaW5nKG1zZy5pbmRleE9mKCIgIikpLnRyaW0oKSk7Y29uc29sZS5sb2coJ2xpc3QgY2xvdGhlcycpfQogICAgICAgICAgICBlbHNlIGlmIChtLmluZGV4T2YoIi9kbmRpY2UgIikgPT0gMCkge0NoYXRyb29tRG5ERGljZShtc2cuc3Vic3RyaW5nKG1zZy5pbmRleE9mKCIgIikpLnRyaW0oKSk7Y29uc29sZS5sb2coJ2RpY2Ugcm9sbCcpfQogICAgICAgICAgICBlbHNlIGlmIChtLmluZGV4T2YoIi9lbmVyZ3kiKSA9PSAwKSB7Q2hhdFJvb21FbmVyZ3lEcmluayhtc2cuc3Vic3RyaW5nKG1zZy5pbmRleE9mKCIgIikpLnRyaW0oKSk7Y29uc29sZS5sb2coJ2VuZXJneSBkcmluaycpfQogICAgICAgICAgICBlbHNlIGlmIChtLmluZGV4T2YoIi9wb29mIikgPT0gMCkge0NoYXRSb29tUG9vZihtc2cuc3Vic3RyaW5nKG1zZy5pbmRleE9mKCIgIikpLnRyaW0oKSk7Y29uc29sZS5sb2coJ3Bvb2YnKX0KICAgICAgICAgICAgZWxzZXsKICAgICAgICAgICAgICAgIHNlbnRUb09yaWdpbmFsID0gdHJ1ZQogICAgICAgICAgICAgICAgT3JpZ2luYWxDaGF0cm9vbVNlbmRDaGF0KCkKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYoIXNlbnRUb09yaWdpbmFsKXsKICAgICAgICAgICAgICAgIENoYXRSb29tTGFzdE1lc3NhZ2UucHVzaChtc2cpOwogICAgICAgICAgICAgICAgQ2hhdFJvb21MYXN0TWVzc2FnZUluZGV4ID0gQ2hhdFJvb21MYXN0TWVzc2FnZS5sZW5ndGg7CiAgICAgICAgICAgICAgICBFbGVtZW50VmFsdWUoIklucHV0Q2hhdCIsICIiKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBBc3lsdW1FbnRyYW5jZUNhbldhbmRlciA9ICgpID0+IHRydWUKCiAgICAgICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgICAgICBjb25zb2xlLmxvZygiY3VzdG9tIGFjdGlvbnMgZG9uZSIpCiAgICB9CgogICAgLy9pbmplY3RpbmcgdGhlIGNvZGUgaW4gYSA8c2NyaXB0PiBlbGVtZW50IGludG8gdGhlIHdlYnNpdGUgRE9NCiAgICB2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7CiAgICBzY3JpcHQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJygnKyBtYWluICsnKSgpOycpKTsKICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2NyaXB0KTsKCn0pKCk7"},{"name":"Custom Actions and spells","options":{"check_for_updates":false,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["https://bondageprojects.elementfx.com/*","https://www.bondageprojects.elementfx.com/*","https://bondage-europe.com/*","https://www.bondage-europe.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null}},"storage":{"ts":1666542930482,"data":{}},"enabled":false,"position":3,"uuid":"d1acb24b-e594-4739-a285-8a73950bb25e","source":""},{"name":"BCX - Bondage Club Extended (Loader)","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":["/^https:\\/\\/(www\\.)?bondageprojects\\.elementfx\\.com\\/R\\d+\\/(BondageClub|\\d+)(\\/((index|\\d+)\\.html)?)?$/","/^https:\\/\\/(www\\.)?bondage-europe\\.com\\/R\\d+\\/(BondageClub|\\d+)(\\/((index|\\d+)\\.html)?)?$/"],"merge_includes":true,"use_matches":[],"orig_matches":[],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-end","orig_noframes":null}},"storage":{"ts":1666545685939,"data":{}},"enabled":true,"position":4,"file_url":"https://jomshir98.github.io/bondage-club-extended/bcxLoader.user.js","uuid":"9d32fb43-29ea-4be7-b117-4e07c8458db3","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBCQ1ggLSBCb25kYWdlIENsdWIgRXh0ZW5kZWQgKExvYWRlcikKLy8gQG5hbWVzcGFjZSAgICBCQ1gKLy8gQHZlcnNpb24gICAgICAxLjAuNQovLyBAZGVzY3JpcHRpb24gIExvYWRlciBvZiBKb21zaGlyJ3MgIkJvbmRhZ2UgQ2x1YiBFeHRlbmRlZCIgbW9kCi8vIEBhdXRob3IgICAgICAgSm9tc2hpcjk4Ci8vIEBpbmNsdWRlICAgICAgL15odHRwczpcL1wvKHd3d1wuKT9ib25kYWdlcHJvamVjdHNcLmVsZW1lbnRmeFwuY29tXC9SXGQrXC8oQm9uZGFnZUNsdWJ8XGQrKShcLygoaW5kZXh8XGQrKVwuaHRtbCk/KT8kLwovLyBAaW5jbHVkZSAgICAgIC9eaHR0cHM6XC9cLyh3d3dcLik/Ym9uZGFnZS1ldXJvcGVcLmNvbVwvUlxkK1wvKEJvbmRhZ2VDbHVifFxkKykoXC8oKGluZGV4fFxkKylcLmh0bWwpPyk/JC8KLy8gQGhvbWVwYWdlICAgICBodHRwczovL2dpdGh1Yi5jb20vam9tc2hpcjk4L2JvbmRhZ2UtY2x1Yi1leHRlbmRlZCNyZWFkbWUKLy8gQHNvdXJjZSAgICAgICBodHRwczovL2dpdGh1Yi5jb20vam9tc2hpcjk4L2JvbmRhZ2UtY2x1Yi1leHRlbmRlZAovLyBAZG93bmxvYWRVUkwgIGh0dHBzOi8vam9tc2hpcjk4LmdpdGh1Yi5pby9ib25kYWdlLWNsdWItZXh0ZW5kZWQvYmN4TG9hZGVyLnVzZXIuanMKLy8gQHJ1bi1hdCAgICAgICBkb2N1bWVudC1lbmQKLy8gQGdyYW50ICAgICAgICBub25lCi8vID09L1VzZXJTY3JpcHQ9PQoKLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtZ2xvYmFscwpzZXRUaW1lb3V0KAoJZnVuY3Rpb24gKCkgewoJCWlmICh3aW5kb3cuQkNYX0xvYWRlZCA9PT0gdW5kZWZpbmVkKSB7CgkJCWNvbnN0IG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzY3JpcHQiKTsKCQkJbi5zZXRBdHRyaWJ1dGUoImxhbmd1YWdlIiwgIkphdmFTY3JpcHQiKTsKCQkJbi5zZXRBdHRyaWJ1dGUoImNyb3Nzb3JpZ2luIiwgImFub255bW91cyIpOwoJCQluLnNldEF0dHJpYnV0ZSgic3JjIiwgImh0dHBzOi8vam9tc2hpcjk4LmdpdGh1Yi5pby9ib25kYWdlLWNsdWItZXh0ZW5kZWQvYmN4LmpzP189IiArIERhdGUubm93KCkpOwoJCQluLm9ubG9hZCA9ICgpID0+IG4ucmVtb3ZlKCk7CgkJCWRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQobik7CgkJfQoJfSwKCTIwMDAKKTsK"},{"name":"Bondage Club Enhancements Loader","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["https://bondageprojects.elementfx.com/*","https://www.bondageprojects.elementfx.com/*","https://bondage-europe.com/*","https://www.bondage-europe.com/*","http://localhost:*/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-end","orig_noframes":null}},"storage":{"ts":1666546584776,"data":{}},"enabled":true,"position":5,"file_url":"https://sidiousious.gitlab.io/bce/bce-loader.user.js","uuid":"de98ca40-79a8-40d0-89cd-54b2419c4494","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgQm9uZGFnZSBDbHViIEVuaGFuY2VtZW50cyBMb2FkZXIKLy8gQG5hbWVzcGFjZSBodHRwczovL3d3dy5ib25kYWdlcHJvamVjdHMuY29tLwovLyBAdmVyc2lvbiAxLjAuMQovLyBAZGVzY3JpcHRpb24gZW5oYW5jZW1lbnRzIGZvciB0aGUgYm9uZGFnZSBjbHViCi8vIEBhdXRob3IgU2lkaW91cwovLyBAbWF0Y2ggaHR0cHM6Ly9ib25kYWdlcHJvamVjdHMuZWxlbWVudGZ4LmNvbS8qCi8vIEBtYXRjaCBodHRwczovL3d3dy5ib25kYWdlcHJvamVjdHMuZWxlbWVudGZ4LmNvbS8qCi8vIEBtYXRjaCBodHRwczovL2JvbmRhZ2UtZXVyb3BlLmNvbS8qCi8vIEBtYXRjaCBodHRwczovL3d3dy5ib25kYWdlLWV1cm9wZS5jb20vKgovLyBAbWF0Y2ggaHR0cDovL2xvY2FsaG9zdDoqLyoKLy8gQGljb24gZGF0YTppbWFnZS9naWY7YmFzZTY0LFIwbEdPRGxoQVFBQkFBQUFBQ0g1QkFFS0FBRUFMQUFBQUFBQkFBRUFBQUlDVEFFQU93PT0KLy8gQGdyYW50IG5vbmUKLy8gQHJ1bi1hdCBkb2N1bWVudC1lbmQKLy8gPT0vVXNlclNjcmlwdD09CgovKioKICogICAgIEJDRQogKiAgQ29weXJpZ2h0IChDKSAyMDIyICBTaWQKICoKICogIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAqICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogKiAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICogIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCiAqCiAqICBUaGlzIHByb2dyYW0gaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCwKICogIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mCiAqICBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlCiAqICBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLgogKgogKiAgWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UKICogIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtLiAgSWYgbm90LCBzZWUgPGh0dHBzOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi4KICovCihmdW5jdGlvbiAoKSB7CgkidXNlIHN0cmljdCI7CgoJY29uc3Qgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7CglzY3JpcHQuc3JjID0gYGh0dHBzOi8vc2lkaW91c2lvdXMuZ2l0bGFiLmlvL2JjZS9iY2UudXNlci5qcz92PSR7KAoJCURhdGUubm93KCkgLyAxMDAwMAoJKS50b0ZpeGVkKDApfWA7Cglkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7Cn0pKCk7Cg=="},{"name":"Custom Actions and spells","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["https://bondageprojects.elementfx.com/*","https://www.bondageprojects.elementfx.com/*","https://bondage-europe.com/*","https://www.bondage-europe.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null}},"storage":{"ts":1666546737725,"data":{}},"enabled":true,"position":6,"uuid":"9e5ecd9f-6e45-4601-9d0f-bd39ccf2949d","source":""}],"settings":{"script_blacklist_server":[{"severity":"2","rules":["/https?:\\/\\/userscripts\\.org\\/scripts\\/(source|version)/(102614).*\\.user\\.js/"]},{"name":"SaveFrom.net helper","severity":"3","rules":["/https?:\\/\\/sf-addon\\.com\\/.*\\/.*\\.user\\.js/","/https?:\\/\\/.*\\.sf-helper\\.com\\/.*\\.user\\.js/"],"reason":"Shows advertisements"},{"severity":"8","reasons":{"en":"Used for a phishing compain to compromise users of baon-nutrition.com"},"rules":["/https?:\\/\\/files\\.ulysse\\.travel\\/.*\\.user\\.js/"]}]}}